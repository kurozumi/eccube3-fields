<?php

/*
 * This file is part of Fields
 *
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Plugin\Fields\Repository;

use Doctrine\ORM\EntityRepository;
use Eccube\Common\Constant;
use Eccube\Entity\Customer;
use Plugin\Fields\Entity\Field;
use Plugin\Fields\Entity\CustomerField;

/**
 * Field
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FieldRepository extends EntityRepository
{

    public function save(Field $Field)
    {
        try {
            $em = $this->getEntityManager();
            if (!$Field->getId()) {
                $rank = $this->getNextRank();
                $Field->setRank($rank);
                $Field->setDelFlg(Constant::DISABLED);
            }

            $em->persist($Field);
            $em->flush($Field);
        } catch (\Exception $e) {
            return false;
        }

        return true;
    }

    public function getNextRank()
    {
        $rank = $this->createQueryBuilder('f')
                ->select('MAX(f.rank)')
                ->getQuery()
                ->getSingleScalarResult();
        if (!$rank) {
            $rank = 0;
        }

        return $rank + 1;
    }

    public function delete(Field $Field)
    {
        try {
            $em = $this->getEntityManager();
            $Field->setDelFlg(Constant::ENABLED);
            $em->persist($Field);
            $em->flush($Field);
        } catch (\Exception $e) {
            return false;
        }

        return true;
    }

    public function moveMakerRank(array $arrRank)
    {
        try {
            $em = $this->getEntityManager();
            $arrMoveRank = array();

            foreach ($arrRank as $fieldId => $rank)
            {
                $Field = $this->find($fieldId);
                if ($Field->getRank() == $rank) {
                    continue;
                }
                $arrMoveRank[$fieldId] = $rank;
                $Field->setRank($rank);
                $em->persist($Field);
                $em->flush($Field);
            }
        } catch (\Exception $e) {
            throw $e;
        }

        return $arrMoveRank;
    }

    public function findCustomerFields(Customer $Customer)
    {
        $qb = $this->getEntityManager()
                ->getRepository('Plugin\Fields\Entity\CustomerField')
                ->createQueryBuilder('cf')
                ->select("cf.text")
                ->where("cf.Customer=:Customer")
                ->andWhere("cf.field_id=f.id");

        return $this->createQueryBuilder('f')
                        ->select()
                        ->addSelect("({$qb->getDQL()}) as text")
                        ->setParameters(array(
                            'Customer' => $Customer
                        ))
                        ->getQuery()
                        ->getResult();
    }

}
